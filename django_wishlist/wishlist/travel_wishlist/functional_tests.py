import selenium
from selenium import webdriver
from selenium.webdriver.chrome.webdriver import WebDriver

from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

from django.test import LiveServerTestCase


class TitleTest(LiveServerTestCase):

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.tearDownClass()

    def test_title_shown_on_home_page(self):
        self.selenium.get(self.live_server_url)

    def setUp(self):
        self.browser = webdriver.Chrome()
        self.browser.implicitly_wait(3)

    def tearDown(self):
        self.browser.quit()

    def test_title_shown_on_home_page(self):
        self.browser.get(self.live_server_url)
        assert 'Travel Wishlist' in self.browser.title


class AddEditPlacesTests(LiveServerTestCase):
    fixtures = ['test_places']

    def setUp(self):
        self.browser = webdriver.Chrome()
        self.browser.implicitly_wait(3)

    def tearDown(self):
        self.browser.quit()

    def test_add_new_place(self):
        # Load home page
        self.browser.get(self.live_server_url)

        # Find input text box . id was generated by Django forms
        input_name = self.browser.find_element_by_id('id_name')
        # Enter place name
        input_name.send_keys('Denver')
        # Find  the add button
        add_button = self.browser.find_element_by_id('add-new-place')
        # And click it
        add_button.click()

        # Make this test code wait for the server to process the request and for page to reload
        # Wait for new element to appear on page
        wait_for_denver = self.browser.find_element_by_id('place-name-5')

        # Assert places from test_paces are on page
        self.assertIn('Tokyo'in self.browser.page_source)
        self.assertIn('New York'in self.browser.page_source)

        # And the new place too
        self.assertIn('Denver'in self.browser.page_source)

